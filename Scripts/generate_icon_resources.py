#!/usr/bin/env python3
"""
Generate icons_resource.rc with safe resource names (prefixed and no extension)
and forward-slash paths to avoid RC parsing/escape issues.

Usage (from the ManuTool folder):
  python Scripts/generate_icon_resources.py --icons ../Assets/Icons/crafting --out ../src/icons_resource.rc

Adjust paths so output goes where your resource.rc can include it.
"""
import os
import argparse
import re

def find_ico_files(root):
    out = []
    for dirpath, dirnames, files in os.walk(root):
        for f in files:
            if f.lower().endswith('.ico'):
                full = os.path.join(dirpath, f)
                out.append(full)
    return sorted(out)

def safe_res_name(basename_no_ext):
    # produce a safe identifier: letters, digits, underscore; must not start with a digit
    s = re.sub(r'[^A-Za-z0-9_]', '_', basename_no_ext)
    if not s:
        s = 'icon'
    if s[0].isdigit():
        s = 'icon_' + s
    return 'icon_' + s  # always prefix to reduce chance of collision

def path_for_rc(fullpath):
    # Use forward slashes to avoid backslash escape issues in resource strings
    p = os.path.normpath(fullpath).replace('\\', '/')
    return p

def main():
    p = argparse.ArgumentParser()
    p.add_argument('--icons', default='../Assets/Icons/crafting', help='icons root (relative to script)')
    p.add_argument('--out', default='../src/icons_resource.rc', help='output rc file')
    args = p.parse_args()

    if not os.path.isdir(args.icons):
        print("Icons folder not found:", args.icons)
        return

    icons = find_ico_files(args.icons)
    if not icons:
        print("No .ico files found under", args.icons)
        return

    outdir = os.path.dirname(args.out) or '.'
    os.makedirs(outdir, exist_ok=True)
    with open(args.out, 'w', encoding='utf-8', newline='\n') as fo:
        fo.write('// Generated by Scripts/generate_icon_resources.py\n\n')
        for ico in icons:
            basename = os.path.basename(ico)            # e.g. AbelKnightArmor.ico
            name_no_ext = os.path.splitext(basename)[0] # e.g. AbelKnightArmor
            resname = safe_res_name(name_no_ext)        # e.g. icon_AbelKnightArmor
            rc_path = path_for_rc(ico)                  # e.g. Assets/Icons/crafting/Armor/AbelKnightArmor.ico
            # Note: we use a quoted string resource name; it's safe and won't be interpreted as numeric.
            fo.write(f"\"{resname}\" ICON \"{rc_path}\"\n")
    print(f"Wrote {args.out} with {len(icons)} icon entries")

if __name__ == '__main__':
    main()